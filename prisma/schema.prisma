generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  image               String?
  emailVerified       DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  leetcodeUsername    String?
  hackerrankUsername  String?
  gfgUsername         String?
  totalSolved         Int                  @default(0)
  easySolved          Int                  @default(0)
  mediumSolved        Int                  @default(0)
  hardSolved          Int                  @default(0)
  lastLeetcodeFetch   DateTime?
  lastHackerrankFetch DateTime?
  lastGfgFetch        DateTime?
  username            String               @unique
  role                Role                 @default(USER)
  password            String?
  isActive            Boolean              @default(true)
  isPublic            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  isLocked            Boolean              @default(false)
  lastLogin           DateTime?
  institutionId       String?
  batchId             String?
  gfgProfile          GFGProfile?
  hackerrankProfile   HackerRankProfile?
  leaderboardStats    LeaderboardStats?
  leetcodeProfile     LeetCodeProfile?
  profileView         ProfileView[]
  questionSubmission  QuestionSubmission[]
  roadmap             Roadmap?
  solvedQuestions     SolvedQuestion[]
  weeklyGoals         WeeklyGoal[]
  blogPosts           BlogPost[]
  report              Report[]
  pushSubscription    PushSubscription[]
  institution         Institution?         @relation(fields: [institutionId], references: [id])
  batch               Batch?               @relation(fields: [batchId], references: [id])

  leaderboardHistory LeaderboardHistory[]
  quiz               Quiz[]

  userSession UserSession[]

  flashcardProgress FlashcardProgress[]
}

model LeetCodeProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  username          String   @unique
  githubUrl         String?
  twitterUrl        String?
  linkedinUrl       String?
  realName          String?
  userAvatar        String?
  ranking           Int?
  totalSolved       Int      @default(0)
  totalSubmissions  Int      @default(0)
  easySolved        Int      @default(0)
  easySubmissions   Int      @default(0)
  mediumSolved      Int      @default(0)
  mediumSubmissions Int      @default(0)
  hardSolved        Int      @default(0)
  hardSubmissions   Int      @default(0)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HackerRankProfile {
  id        String            @id @default(cuid())
  userId    String            @unique
  username  String            @unique
  name      String?
  about     String?
  skills    String[]
  updatedAt DateTime          @updatedAt
  badges    HackerRankBadge[]
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HackerRankBadge {
  id                  String            @id @default(cuid())
  hackerrankProfileId String
  name                String
  stars               String
  profile             HackerRankProfile @relation(fields: [hackerrankProfileId], references: [id], onDelete: Cascade)

  @@unique([hackerrankProfileId, name])
}

model GFGProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  username       String   @unique
  name           String?
  institution    String?
  rank           String?
  solvedProblems String?
  codingScore    String?
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderboardStats {
  id              String   @id @default(cuid())
  userId          String   @unique
  overallScore    Float    @default(0)
  leetcodeScore   Float    @default(0)
  hackerrankScore Float    @default(0)
  gfgScore        Float    @default(0)
  globalRank      Int?
  leetcodeRank    Int?
  hackerrankRank  Int?
  gfgRank         Int?
  lastUpdated     DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive        Boolean  @default(true)
  isDeleted       Boolean  @default(false)
}

model ProfileView {
  id              String   @id @default(cuid())
  username        String
  createdAt       DateTime @default(now())
  operatingSystem String?
  browser         String?
  device          String?
  user            User     @relation(fields: [username], references: [username], onDelete: Cascade)
}

model ApplicationStats {
  id                             String   @id @default(cuid())
  lastLeaderboardUpdate          DateTime @default(now())
  totalProfileViews              Int      @default(0)
  totalQuestionsSolved           Int      @default(0)
  profileViewsSinceLastUpdate    Int      @default(0)
  questionsSolvedSinceLastUpdate Int      @default(0)
  lastLeaderboardEmailAt         DateTime @default(now())
  totalQuestionSolvedOnPlatform  Int      @default(0)
  createdAt                      DateTime @default(now())
}

model Subject {
  id             String              @id @default(cuid())
  subjectName    String
  isCoreSubject  Boolean
  canHaveRoadmap Boolean             @default(false)
  sections       PredefinedSection[]

  FlashcardDeck FlashcardDeck[]
}

model Roadmap {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections  Section[] @relation("RoadmapSections")
  topics    Topic[]
}

model PredefinedSection {
  id          String            @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  topics      PredefinedTopic[] @relation("PredefinedSectionTopics")
  subjectId   String
  subject     Subject           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Section {
  id                  String   @id @default(cuid())
  roadmapId           String
  title               String
  order               Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  description         String?
  predefinedSectionId String?
  roadmap             Roadmap  @relation("RoadmapSections", fields: [roadmapId], references: [id], onDelete: Cascade)
  topics              Topic[]  @relation("SectionTopics")

  @@unique([roadmapId, order])
}

model PredefinedTopic {
  id                  String            @id @default(cuid())
  title               String            @unique
  description         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  predefinedSectionId String
  level               TopicLevel        @default(BEGINNER)
  preRequisites       String[]
  subTopics           String[]
  predefinedSection   PredefinedSection @relation("PredefinedSectionTopics", fields: [predefinedSectionId], references: [id], onDelete: Cascade)
  questions           Question[]
  resources           Resource[]
  topics              Topic[]

  quiz Quiz[]
}

model Resource {
  id        String          @id @default(cuid())
  topicId   String
  type      ResourceType
  url       String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String?
  topic     PredefinedTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Topic {
  id                String          @id @default(cuid())
  sectionId         String
  roadmapId         String
  predefinedTopicId String
  order             Int
  completed         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  predefinedTopic   PredefinedTopic @relation(fields: [predefinedTopicId], references: [id])
  roadmap           Roadmap         @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  section           Section         @relation("SectionTopics", fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, order])
}

model SolvedQuestion {
  id         String   @id @default(cuid())
  userId     String
  code       String
  createdAt  DateTime @default(now())
  QuestionId String
  Question   Question @relation(fields: [QuestionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id                String           @id @default(cuid())
  title             String
  slug              String @default("")
  description       String
  questionType      QuestionType // Enum: CODE | MCQ
  difficulty        Difficulty // Enum: EASY | MEDIUM | HARD
  predefinedTopicId String?
  predefinedTopic   PredefinedTopic? @relation(fields: [predefinedTopicId], references: [id], onDelete: Cascade)

  // Coding Question Fields
  timeComplexity  String?
  spaceComplexity String?
  constraints     Constraint[]
  testCases       TestCase[]
  submissions     QuestionSubmission[]
  solvedBy        SolvedQuestion[]
  sampleCodes     SampleCode[]
  hints           String[]
  examples        Example[] // Input/output examples
  solution        String? // Editorial solution
  languageSupport String[] // Supported programming languages

  // MCQ Fields
  options       String[] // List of options
  correctOption String? // Single correct option; can also use String[] for multiple correct
  explanation   String?

  // Analytics / Stats
  attemptCount     Int    @default(0) // Number of attempts
  successCount     Int    @default(0) // Number of successful submissions
  solvedPercentage Float? // Calculated or cached success rate

  // Quiz Relationships
  quiz         Quiz[]
  quizResponse QuizResponse[]

  // Common Fields
  tags      String[] // e.g., ["DP", "Graph", "Array"]
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  languageWrapper LanguageWrapper[]
}

model Example {
  id          String   @id @default(cuid())
  input       String
  output      String
  description String?
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model LanguageWrapper {
  id              String              @id @default(cuid())
  questionId      String
  language        ProgrammingLanguage
  functionName    String? // Function name in this language
  className       String? // Class name (Java only, null for Python/C++)
  methodSignature String? // Full signature for this language
  template        String // Wrapper template with {{CODE}} placeholder
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  question        Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, language])
}

model SampleCode {
  id         String              @id @default(cuid())
  questionId String
  language   ProgrammingLanguage
  code       String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  question   Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model TestCase {
  id          String   @id @default(cuid())
  questionId  String
  input       String
  output      String
  explanation String?
  isHidden    Boolean  @default(false) // hidden test case (not visible to users)
  isSample    Boolean  @default(false) // visible test case shown in UI
  isActive    Boolean  @default(true) // soft disable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Constraint {
  id         String   @id @default(cuid())
  questionId String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionSubmission {
  id          String   @id @default(cuid())
  userId      String
  questionId  String
  code        String
  languageId  Int
  verdict     String // e.g., "Accepted", "Wrong Answer", "TLE"
  passedCount Int      @default(0) // how many test cases passed
  totalCount  Int      @default(0) // total test cases for this question
  results     Json // store per-testcase results { testCaseId: { status, stdout, stderr } }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  User User @relation(fields: [userId], references: [id])
}

model ErrorLog {
  id        String   @id @default(cuid())
  error     String
  createdAt DateTime @default(now())
  errorAt   String
  forUser   String?
}

model WeeklyGoal {
  id           String     @id @default(cuid())
  userId       String
  title        String
  description  String?
  targetCount  Int
  currentCount Int        @default(0)
  startDate    DateTime
  endDate      DateTime
  status       GoalStatus @default(IN_PROGRESS)
  type         GoalType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedAt  DateTime?
  isDeleted    Boolean    @default(false)
}

model BlogPost {
  id            String    @id @default(cuid())
  title         String
  description   String
  content       String
  authorId      String
  featuredImage String?
  category      String?
  tags          String[]
  slug          String    @unique
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  isFeatured    Boolean   @default(false)
  isApproved    Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Report {
  id          String       @id @default(cuid())
  userId      String
  type        ReportType   @default(BUG)
  title       String
  description String
  status      ReportStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  country     String?
  website     String?
  logo        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  users       User[]
  batches     Batch[]
}

model Batch {
  id            String      @id @default(cuid())
  name          String
  code          String
  batchYears    String // e.g., "2023-2025" or "2024-2026"
  startYear     Int // e.g., 2023
  endYear       Int // e.g., 2025
  startDate     DateTime
  endDate       DateTime?
  department    String?
  program       String?
  description   String?
  institutionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  users         User[]

  @@unique([institutionId, code])
}

model LeaderboardHistory {
  id         String   @id @default(cuid())
  userId     String
  rank       Int
  snapshotAt DateTime
  rankChange Int?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, snapshotAt]) // Prevents duplicate entries for the same user at same time
}

model Quiz {
  id           String          @id @default(cuid())
  userId       String
  topicId      String
  questions    Question[]
  startedAt    DateTime?
  submittedAt  DateTime?
  status       QuizStatus      @default(CREATED)
  timeAlloted  Int
  score        Int             @default(0)
  quizResponse QuizResponse[]
  topic        PredefinedTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())
}

model QuizResponse {
  id         String   @id @default(cuid())
  questionId String
  response   String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  pagePath  String
  startTime DateTime
  endTime   DateTime
  duration  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FlashcardDeck {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  flashcards Flashcard[]
  subjectId  String // Link to Subject
  subject    Subject     @relation(fields: [subjectId], references: [id])
}

model Flashcard {
  id        String   @id @default(cuid())
  question  String
  answer    String
  hint      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deckId String
  deck   FlashcardDeck @relation(fields: [deckId], references: [id])

  FlashcardProgress FlashcardProgress[]
}

model FlashcardProgress {
  id           String    @id @default(cuid())
  userId       String
  flashcardId  String
  lastReviewed DateTime?
  nextReview   DateTime?
  attempts     Int       @default(0)
  correctCount Int       @default(0)
  easeFactor   Float     @default(2.5)

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  flashcard Flashcard @relation(fields: [flashcardId], references: [id])

  @@unique([userId, flashcardId]) // unique progress per user per flashcard
}

enum Role {
  USER
  ADMIN
}

enum ResourceType {
  VIDEO
  ARTICLE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgrammingLanguage {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  JAVA
  CPP
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  PENDING
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
}

enum GoalType {
  IMPLEMENTATION
  CONCEPT
  ALGORITHM
}

enum TopicLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ReportType {
  BUG
  ISSUE
  USERNAME_CHANGE
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum QuestionType {
  MCQ
  CODE
}

enum QuizStatus {
  CREATED
  STARTED
  SUBMITTED
}
