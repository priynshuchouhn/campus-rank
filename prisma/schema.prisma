generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  image               String?
  emailVerified       DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  leetcodeUsername    String?
  hackerrankUsername  String?
  gfgUsername         String?
  totalSolved         Int                  @default(0)
  easySolved          Int                  @default(0)
  mediumSolved        Int                  @default(0)
  hardSolved          Int                  @default(0)
  lastLeetcodeFetch   DateTime?
  lastHackerrankFetch DateTime?
  lastGfgFetch        DateTime?
  username            String               @unique
  role                Role                 @default(USER)
  password            String?
  isActive            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  isLocked            Boolean              @default(false)
  lastLogin           DateTime?
  institutionId       String?
  batchId             String?
  gfgProfile          GFGProfile?
  hackerrankProfile   HackerRankProfile?
  leaderboardStats    LeaderboardStats?
  leetcodeProfile     LeetCodeProfile?
  profileView         ProfileView[]
  QuestionSubmission  QuestionSubmission[]
  roadmap             Roadmap?
  solvedQuestions     SolvedQuestion[]
  weeklyGoals         WeeklyGoal[]
  blogPosts           BlogPost[]
  report              Report[]
  pushSubscription    PushSubscription[]
  institution         Institution?         @relation(fields: [institutionId], references: [id])
  batch               Batch?               @relation(fields: [batchId], references: [id])
}

model LeetCodeProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  username          String   @unique
  githubUrl         String?
  twitterUrl        String?
  linkedinUrl       String?
  realName          String?
  userAvatar        String?
  ranking           Int?
  totalSolved       Int      @default(0)
  totalSubmissions  Int      @default(0)
  easySolved        Int      @default(0)
  easySubmissions   Int      @default(0)
  mediumSolved      Int      @default(0)
  mediumSubmissions Int      @default(0)
  hardSolved        Int      @default(0)
  hardSubmissions   Int      @default(0)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HackerRankProfile {
  id        String            @id @default(cuid())
  userId    String            @unique
  username  String            @unique
  name      String?
  about     String?
  skills    String[]
  updatedAt DateTime          @updatedAt
  badges    HackerRankBadge[]
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HackerRankBadge {
  id                  String            @id @default(cuid())
  hackerrankProfileId String
  name                String
  stars               String
  profile             HackerRankProfile @relation(fields: [hackerrankProfileId], references: [id], onDelete: Cascade)

  @@unique([hackerrankProfileId, name])
}

model GFGProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  username       String   @unique
  name           String?
  institution    String?
  rank           String?
  solvedProblems String?
  codingScore    String?
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderboardStats {
  id              String   @id @default(cuid())
  userId          String   @unique
  overallScore    Float    @default(0)
  leetcodeScore   Float    @default(0)
  hackerrankScore Float    @default(0)
  gfgScore        Float    @default(0)
  globalRank      Int?
  leetcodeRank    Int?
  hackerrankRank  Int?
  gfgRank         Int?
  lastUpdated     DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfileView {
  id              String   @id @default(cuid())
  username        String
  createdAt       DateTime @default(now())
  operatingSystem String?
  browser         String?
  device          String?
  user            User     @relation(fields: [username], references: [username], onDelete: Cascade)
}

model ApplicationStats {
  id                             String   @id @default(cuid())
  lastLeaderboardUpdate          DateTime @default(now())
  totalProfileViews              Int      @default(0)
  totalQuestionsSolved           Int      @default(0)
  profileViewsSinceLastUpdate    Int      @default(0)
  questionsSolvedSinceLastUpdate Int      @default(0)
  createdAt                      DateTime @default(now())
}

model Roadmap {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections  Section[] @relation("RoadmapSections")
  topics    Topic[]
}

model PredefinedSection {
  id          String            @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  topics      PredefinedTopic[] @relation("PredefinedSectionTopics")
}

model Section {
  id                  String   @id @default(cuid())
  roadmapId           String
  title               String
  order               Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  description         String?
  predefinedSectionId String?
  roadmap             Roadmap  @relation("RoadmapSections", fields: [roadmapId], references: [id], onDelete: Cascade)
  topics              Topic[]  @relation("SectionTopics")

  @@unique([roadmapId, order])
}

model PredefinedTopic {
  id                  String            @id @default(cuid())
  title               String            @unique
  description         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  predefinedSectionId String
  level               TopicLevel        @default(BEGINNER)
  preRequisites       String[]
  subTopics           String[]
  predefinedSection   PredefinedSection @relation("PredefinedSectionTopics", fields: [predefinedSectionId], references: [id], onDelete: Cascade)
  questions           Question[]
  resources           Resource[]
  topics              Topic[]
}

model Resource {
  id        String          @id @default(cuid())
  topicId   String
  type      ResourceType
  url       String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String?
  topic     PredefinedTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Topic {
  id                String          @id @default(cuid())
  sectionId         String
  roadmapId         String
  predefinedTopicId String
  order             Int
  completed         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  questions         Question[]
  predefinedTopic   PredefinedTopic @relation(fields: [predefinedTopicId], references: [id])
  roadmap           Roadmap         @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  section           Section         @relation("SectionTopics", fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, order])
}

model SolvedQuestion {
  id         String   @id @default(cuid())
  userId     String
  code       String
  createdAt  DateTime @default(now())
  QuestionId String
  Question   Question @relation(fields: [QuestionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id                String               @id @default(cuid())
  title             String
  description       String
  difficulty        Difficulty
  timeComplexity    String
  spaceComplexity   String
  section           String
  topicName         String
  topicId           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  predefinedTopicId String?
  constraints       Constraint[]
  predefinedTopic   PredefinedTopic?     @relation(fields: [predefinedTopicId], references: [id])
  topic             Topic?               @relation(fields: [topicId], references: [id])
  submissions       QuestionSubmission[]
  sampleCodes       SampleCode[]
  solvedBy          SolvedQuestion[]
  testCases         TestCase[]
}

model SampleCode {
  id         String              @id @default(cuid())
  questionId String
  language   ProgrammingLanguage
  code       String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  question   Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model TestCase {
  id          String   @id @default(cuid())
  questionId  String
  input       String
  output      String
  explanation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Constraint {
  id         String   @id @default(cuid())
  questionId String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionSubmission {
  id            String           @id @default(cuid())
  questionId    String
  userId        String
  code          String
  status        SubmissionStatus
  createdAt     DateTime         @default(now())
  executionTime Int?
  memoryUsed    Int?
  question      Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ErrorLog {
  id        String   @id @default(cuid())
  error     String
  createdAt DateTime @default(now())
  errorAt   String
  forUser   String?
}

model WeeklyGoal {
  id           String     @id @default(cuid())
  userId       String
  title        String
  description  String?
  targetCount  Int
  currentCount Int        @default(0)
  startDate    DateTime
  endDate      DateTime
  status       GoalStatus @default(IN_PROGRESS)
  type         GoalType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedAt  DateTime?
  isDeleted    Boolean    @default(false)
}

model BlogPost {
  id            String    @id @default(cuid())
  title         String
  description   String
  content       String
  authorId      String
  featuredImage String?
  category      String?
  tags          String[]
  slug          String    @unique
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  isFeatured    Boolean   @default(false)
  isApproved    Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Report {
  id          String       @id @default(cuid())
  userId      String
  type        ReportType   @default(BUG)
  title       String
  description String
  status      ReportStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  country     String?
  website     String?
  logo        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  users       User[]
  batches     Batch[]
}

model Batch {
  id            String      @id @default(cuid())
  name          String
  code          String
  batchYears    String // e.g., "2023-2025" or "2024-2026"
  startYear     Int // e.g., 2023
  endYear       Int // e.g., 2025
  startDate     DateTime
  endDate       DateTime?
  department    String?
  program       String?
  description   String?
  institutionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  users         User[]

  @@unique([institutionId, code])
}

enum Role {
  USER
  ADMIN
}

enum ResourceType {
  VIDEO
  ARTICLE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgrammingLanguage {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  JAVA
  CPP
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  PENDING
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
}

enum GoalType {
  IMPLEMENTATION
  CONCEPT
  ALGORITHM
}

enum TopicLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ReportType {
  BUG
  ISSUE
  USERNAME_CHANGE
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
