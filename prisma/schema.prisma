// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  username      String    @unique
  role          Role      @default(USER)

  leetcodeUsername   String?
  hackerrankUsername String?
  gfgUsername        String?

  totalSolved  Int @default(0)
  easySolved   Int @default(0)
  mediumSolved Int @default(0)
  hardSolved   Int @default(0)

  lastLeetcodeFetch   DateTime?
  lastHackerrankFetch DateTime?
  lastGfgFetch        DateTime?

  leetcodeProfile   LeetCodeProfile?
  hackerrankProfile HackerRankProfile?
  gfgProfile        GFGProfile?

  leaderboardStats LeaderboardStats?
  profileView      ProfileView[]
  roadmap          Roadmap?
}

model LeetCodeProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  username    String  @unique
  githubUrl   String?
  twitterUrl  String?
  linkedinUrl String?

  realName   String?
  userAvatar String?
  ranking    Int?

  totalSolved       Int @default(0)
  totalSubmissions  Int @default(0)
  easySolved        Int @default(0)
  easySubmissions   Int @default(0)
  mediumSolved      Int @default(0)
  mediumSubmissions Int @default(0)
  hardSolved        Int @default(0)
  hardSubmissions   Int @default(0)

  updatedAt DateTime @updatedAt
}

model HackerRankProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  username String  @unique
  name     String?
  about    String?

  skills String[]
  badges HackerRankBadge[]

  updatedAt DateTime @updatedAt
}

model HackerRankBadge {
  id                  String            @id @default(cuid())
  hackerrankProfileId String
  profile             HackerRankProfile @relation(fields: [hackerrankProfileId], references: [id], onDelete: Cascade)

  name  String
  stars String

  @@unique([hackerrankProfileId, name])
}

model GFGProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  username       String  @unique
  name           String?
  institution    String?
  rank           String?
  solvedProblems String?
  codingScore    String?

  updatedAt DateTime @updatedAt
}

model LeaderboardStats {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  overallScore    Float    @default(0)
  leetcodeScore   Float    @default(0)
  hackerrankScore Float    @default(0)
  gfgScore        Float    @default(0)
  globalRank      Int?
  leetcodeRank    Int?
  hackerrankRank  Int?
  gfgRank         Int?
  lastUpdated     DateTime @updatedAt
}

model ProfileView {
  id              String   @id @default(cuid())
  username        String
  user            User     @relation(fields: [username], references: [username], onDelete: Cascade)
  createdAt       DateTime @default(now())
  operatingSystem String?
  browser         String?
  device          String?
}

model ApplicationStats {
  id                             String   @id @default(cuid())
  lastLeaderboardUpdate          DateTime @default(now())
  totalProfileViews              Int      @default(0)
  totalQuestionsSolved           Int      @default(0)
  profileViewsSinceLastUpdate    Int      @default(0)
  questionsSolvedSinceLastUpdate Int      @default(0)
  createdAt                      DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

model Roadmap {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections  Section[] @relation("RoadmapSections")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  topic     Topic[]
}

model Section {
  id        String   @id @default(cuid())
  roadmapId String
  roadmap   Roadmap  @relation("RoadmapSections", fields: [roadmapId], references: [id], onDelete: Cascade)
  title     String
  order     Int // To maintain the order of sections
  topics    Topic[]  @relation("SectionTopics")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roadmapId, order]) // Ensures that each section in a roadmap has a unique order
}

model PredefinedTopic {
  id          String     @id @default(cuid())
  title       String     @unique
  description String?
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  topic       Topic[]
}

model Resource {
  id        String          @id @default(cuid())
  topicId   String
  topic     PredefinedTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  type      ResourceType
  url       String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum ResourceType {
  VIDEO
  ARTICLE
}

model Topic {
  id                String           @id @default(cuid())
  sectionId         String
  section           Section          @relation("SectionTopics", fields: [sectionId], references: [id], onDelete: Cascade)
  roadmapId         String
  roadmap           Roadmap          @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  predefinedTopicId String
  predefinedTopic   PredefinedTopic  @relation(fields: [predefinedTopicId], references: [id], onDelete: Cascade)
  order             Int // This field determines the sequence of topics in the section
  completed         Boolean          @default(false)
  codingQuestions   CodingQuestion[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([sectionId, order]) // Ensures that each topic in a section has a unique order
}

model CodingQuestion {
  id          String   @id @default(cuid())
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  question    String
  solutionUrl String? // Optional URL for a solution or explanation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
